from math import log10 as ลอกฐาน๑๐, sqrt as รากที่สอง


def ඞ(ก): return float(ก)


จำนวนจุดลอยตัว = float
เมธอดแบบคงที่ = staticmethod
พิมพ์สู่เอสทีดีเอาท์ = print
ข้อมูลนำเข้าจากเอสทีดีอิน = input


class สูตรคำนวณอะไรไม่รู้ผมเกลียดชีวะ:

    @เมธอดแบบคงที่
    def Mosteller(น้ำหนักในหน่วยกิโลกรัม: จำนวนจุดลอยตัว, ส่วนสูงในหน่วยเซนติเมตร: จำนวนจุดลอยตัว) -> จำนวนจุดลอยตัว:
        return รากที่สอง(น้ำหนักในหน่วยกิโลกรัม * ส่วนสูงในหน่วยเซนติเมตร) / ඞ("๖๐")

    @เมธอดแบบคงที่
    def Haycock(น้ำหนักในหน่วยกิโลกรัม: จำนวนจุดลอยตัว, ส่วนสูงในหน่วยเซนติเมตร: จำนวนจุดลอยตัว) -> จำนวนจุดลอยตัว:
        return ඞ("๐.๐๒๔๒๖๕") * น้ำหนักในหน่วยกิโลกรัม ** ඞ("๐.๕๓๗๘") * ส่วนสูงในหน่วยเซนติเมตร ** ඞ("๐.๓๙๖๔")

    @เมธอดแบบคงที่
    def Boyd(น้ำหนักในหน่วยกิโลกรัม: จำนวนจุดลอยตัว, ส่วนสูงในหน่วยเซนติเมตร: จำนวนจุดลอยตัว) -> จำนวนจุดลอยตัว:
        return ඞ("๐.๐๓๓๓") * น้ำหนักในหน่วยกิโลกรัม ** (ඞ("๐.๖๑๕๗") - ඞ("๐.๐๑๘๘") * ลอกฐาน๑๐(น้ำหนักในหน่วยกิโลกรัม)) * ส่วนสูงในหน่วยเซนติเมตร ** ඞ("๐.๓")


น้ำหนักรับเข้า = จำนวนจุดลอยตัว(ข้อมูลนำเข้าจากเอสทีดีอิน())
ส่วนสูงนำเข้า = จำนวนจุดลอยตัว(ข้อมูลนำเข้าจากเอสทีดีอิน())


พิมพ์สู่เอสทีดีเอาท์(สูตรคำนวณอะไรไม่รู้ผมเกลียดชีวะ.Mosteller(
    น้ำหนักรับเข้า, ส่วนสูงนำเข้า))
พิมพ์สู่เอสทีดีเอาท์(สูตรคำนวณอะไรไม่รู้ผมเกลียดชีวะ.Haycock(
    น้ำหนักรับเข้า, ส่วนสูงนำเข้า))
พิมพ์สู่เอสทีดีเอาท์(สูตรคำนวณอะไรไม่รู้ผมเกลียดชีวะ.Boyd(
    น้ำหนักรับเข้า, ส่วนสูงนำเข้า))
